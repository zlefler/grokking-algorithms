from collections import deque


def unique_abbrs(string):
    '''Given a word, write a function to generate all of its unique generalized abbreviations.
A generalized abbreviation of a word can be generated by replacing each substring of the word with the count of characters in the substring. Take the example of “ab” which has four substrings: “”, “a”, “b”, and “ab”. After replacing these substrings in the actual word by the count of characters, we get all the generalized abbreviations: “ab”, “1b”, “a1”, and “2”.
Note: All contiguous characters should be considered one substring, e.g., we can’t take “a” and “b” as substrings to get “11”; since “a” and “b” are contiguous, we should consider them together as one substring to get an abbreviation “2”.'''

    permutations = []
    queue = deque()
    queue.append([])

    for char in string:
        for _ in range(len(queue)):
            old_perm = queue.popleft()
            for i in range(len(old_perm) + 1):
                new_perm = list(old_perm)
                new_perm.insert(i, char)
                if len(new_perm) == len(string):
                    permutations.append(''.join(new_perm))
                else:
                    queue.append(''.join(new_perm))
    return permutations


print(unique_abbrs('BAT'))

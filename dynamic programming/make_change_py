from functools import lru_cache

'''Given an integer representing a given amount of change, write a
function to compute the total number of coins required to make
that amount of change. You can assume that there is always a
1Â¢ coin.'''

coins = [1, 6, 10]


def make_change_brute_force(coins, c):
    if c == 0:
        return 0
    min_coins = float('inf')
    for coin in coins:
        if c - coin >= 0:
            curr_min_coins = make_change_brute_force(c - coin)
            if curr_min_coins < min_coins:
                min_coins = curr_min_coins
    return min_coins + 1


# print(make_change_brute_force(coins, 59)) # takes 10.475s

def make_change_dp(coins, amount):
    @lru_cache(None)
    def dp(i, amount):
        if amount == 0:
            return 0
        if i == -1:
            return float('inf')

        ans = dp(i-1, amount)
        if amount >= coins[i]:
            ans = min(ans, dp(i, amount - coins[i]) + 1)
        return ans

    n = len(coins)
    ans = dp(n-1, amount)
    return ans if ans != float('inf') else -1


print(make_change_dp(coins, 59))
